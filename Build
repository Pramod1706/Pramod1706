Great! Storing sensitive information like usernames and API tokens directly in the Jenkinsfile is not ideal. Instead, it's better to use Jenkins' built-in credentials management. This will keep your credentials secure and make your pipeline cleaner.

Here's how you can update your Jenkins pipeline to use credentials:

Step 1: Store Credentials in Jenkins

1. Go to Jenkins Dashboard.


2. Navigate to "Manage Jenkins" > "Manage Credentials".


3. Choose the appropriate scope (e.g., "Global" or specific to a folder).


4. Click “Add Credentials”.


5. Set the Kind to "Username with password".


6. Enter your Jenkins username as the username and your API token as the password.


7. Give it a Credential ID (e.g., jenkins-api-creds). You'll use this ID in the pipeline.



Step 2: Update Jenkinsfile to Use the Credentials

Here’s how you can modify the Jenkinsfile:

pipeline {
    agent any
    environment {
        // Define your target date in a recognizable format (e.g., yyyy-MM-dd HH:mm:ss)
        TARGET_DATE = '2024-10-25 12:00:00' 
        JENKINS_URL = "http://jenkins-server-url" // Update with your Jenkins server URL
        JOB_NAME = "YOUR_JOB_NAME" // Update with the job you want to trigger
    }
    parameters {
        string(name: 'PARAM1', defaultValue: 'value1', description: 'First parameter')
        string(name: 'PARAM2', defaultValue: 'value2', description: 'Second parameter')
    }
    stages {
        stage('Calculate Delay') {
            steps {
                script {
                    // Parse the target date and the current date
                    def targetDate = Date.parse("yyyy-MM-dd HH:mm:ss", TARGET_DATE)
                    def currentDate = new Date()
                    
                    // Calculate the difference in milliseconds
                    def delayMillis = targetDate.getTime() - currentDate.getTime()
                    
                    // Convert the delay to seconds
                    def delaySeconds = (delayMillis / 1000).toInteger()
                    
                    // Ensure the delay is not negative (if the target date is in the past)
                    if (delaySeconds < 0) {
                        echo "The target date is in the past. No delay will be applied."
                        delaySeconds = 0
                    }
                    
                    // Log the delay for reference
                    echo "Calculated delay in seconds: ${delaySeconds}"

                    // Save delay value for further stages
                    env.CALCULATED_DELAY = delaySeconds
                }
            }
        }
        stage('Trigger Job with Delay and Parameters') {
            steps {
                script {
                    // Use Jenkins Credentials to get username and token
                    withCredentials([usernamePassword(credentialsId: 'jenkins-api-creds', usernameVariable: 'JENKINS_USER', passwordVariable: 'JENKINS_TOKEN')]) {
                        // Construct the URL to trigger the job with parameters
                        def params = [
                            "PARAM1=${params.PARAM1}",
                            "PARAM2=${params.PARAM2}"
                        ].join('&')

                        def jenkinsUrl = "${JENKINS_URL}/job/${JOB_NAME}/buildWithParameters?delay=${env.CALCULATED_DELAY}sec&${params}"
                        def encodedAuth = "${JENKINS_USER}:${JENKINS_TOKEN}".bytes.encodeBase64().toString()

                        // Make a request to Jenkins API
                        sh """
                        curl -X POST "${jenkinsUrl}" \
                        --header "Authorization: Basic ${encodedAuth}" \
                        --header "Content-Type: application/x-www-form-urlencoded"
                        """
                    }
                }
            }
        }
    }
}

Explanation:

1. Storing Credentials Securely:

The withCredentials block retrieves the username and API token securely.

usernamePassword: This type of credential allows you to access the stored username and password (API token) using environment variables.

Replace 'jenkins-api-creds' with the ID of the credentials you created in Jenkins.



2. Using Environment Variables:

The username and token are temporarily stored in JENKINS_USER and JENKINS_TOKEN.

The script then encodes them for the Authorization header.



3. Secure Handling:

Credentials are not hardcoded in the pipeline, making it safer and easier to maintain.




Benefits:

Security: Credentials are managed securely within Jenkins.

Clean Pipeline Code: Your Jenkinsfile is cleaner and doesn’t expose sensitive data.


Would you like any further clarification or adjustments to this approach?
