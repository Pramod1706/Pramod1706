Here is the updated Jenkinsfile that fixes the LazyMap issue and ensures JSON data is handled properly. This version explicitly converts the LazyMap to a standard Groovy map using .collectEntries() and adds additional error handling.


---

Updated Jenkinsfile

pipeline {
    agent any
    parameters {
        string(name: 'API_Name', defaultValue: '', description: 'API Name to fetch details')
    }
    stages {
        stage('Read JSON and Process Data') {
            steps {
                script {
                    // Function to safely parse JSON and convert LazyMap to Groovy Map
                    def parseJsonFile = { filePath ->
                        def jsonData = new JsonSlurper().parseText(readFile(filePath))
                        return jsonData.collectEntries { key, value -> [(key): value] }
                    }

                    // Read and process Production JSON
                    def namespaceJson_PROD = parseJsonFile("./cd-production/namespace/prod.json")
                    if (!namespaceJson_PROD.containsKey(params.API_Name)) {
                        error "API Name '${params.API_Name}' not found in Production namespace JSON"
                    }
                    
                    env.namespaceProd = namespaceJson_PROD[params.API_Name]?.namespace
                    env.helmChatNameProd = namespaceJson_PROD[params.API_Name]?.helmChatName
                    env.helmChatName_reference_PROD = namespaceJson_PROD[params.API_Name]?.helmChatName_reference

                    if (!env.namespaceProd || !env.helmChatNameProd || !env.helmChatName_reference_PROD) {
                        error "One or more required Production values (namespace, helmChatName, helmChatName_reference) are null"
                    }

                    echo "Production Details:"
                    echo "Namespace: ${env.namespaceProd}"
                    echo "Helm Chat Name: ${env.helmChatNameProd}"
                    echo "Helm Chat Name Reference: ${env.helmChatName_reference_PROD}"

                    // Read and process CONT JSON
                    def namespaceJson_CONT = parseJsonFile("./cd-production/namespace/cont.json")
                    if (!namespaceJson_CONT.containsKey(params.API_Name)) {
                        error "API Name '${params.API_Name}' not found in CONT namespace JSON"
                    }
                    
                    env.namespaceCont = namespaceJson_CONT[params.API_Name]?.namespace
                    env.helmChatNameCont = namespaceJson_CONT[params.API_Name]?.helmChatName
                    env.helmChatName_reference_CONT = namespaceJson_CONT[params.API_Name]?.helmChatName_reference

                    if (!env.namespaceCont || !env.helmChatNameCont || !env.helmChatName_reference_CONT) {
                        error "One or more required CONT values (namespace, helmChatName, helmChatName_reference) are null"
                    }

                    echo "CONT Details:"
                    echo "Namespace: ${env.namespaceCont}"
                    echo "Helm Chat Name: ${env.helmChatNameCont}"
                    echo "Helm Chat Name Reference: ${env.helmChatName_reference_CONT}"
                }
            }
        }
    }
}


---

Key Fixes & Improvements

1. Fixes LazyMap Issue:

Converts LazyMap to a standard Groovy map using .collectEntries().



2. Reusable Function (parseJsonFile)

Reads and converts JSON in a clean, reusable way.



3. Null & Key Checks:

Prevents errors if a key is missing or a value is null.



4. Better Debugging:

Provides meaningful error messages if API_Name is not found.




Let me know if you need further modifications!
